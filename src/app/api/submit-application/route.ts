import { type NextRequest, NextResponse } from 'next/server';
import { initializeApp, getApps } from 'firebase/app';
import { getFirestore, collection, addDoc, doc, getDoc, Timestamp } from 'firebase/firestore';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
let app: any;
let db: any;

try {
  const apps = getApps();
  if (apps.length > 0) {
    app = apps[0];
  } else {
    app = initializeApp(firebaseConfig);
  }
  db = getFirestore(app);
} catch (error) {
  console.error('Firebase initialization error:', error);
}

export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  });
}

export async function POST(request: NextRequest) {
  try {
    if (!db) {
      return NextResponse.json(
        { error: 'Firebase not initialized' },
        {
          status: 500,
          headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type',
          }
        }
      );
    }

    const body = await request.json();
    const { vacancyId, applicantName, applicantPhone, applicantEmail, message } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!vacancyId || !applicantName || !applicantPhone) {
      return NextResponse.json(
        { error: 'Missing required fields: vacancyId, applicantName, applicantPhone' },
        {
          status: 400,
          headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type',
          }
        }
      );
    }

    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ Firestore
    const applicationData = {
      vacancyId: vacancyId,
      applicantName: applicantName,
      applicantPhone: applicantPhone,
      applicantEmail: applicantEmail || '',
      message: message || '',
      createdAt: Timestamp.now(),
      status: 'new'
    };

    console.log('Attempting to save to Firestore:', applicationData);
    const docRef = await addDoc(collection(db, 'applications'), applicationData);
    const applicationId = docRef.id;
    console.log('Successfully saved application with ID:', applicationId);

    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    let vacancy = null;
    try {
      const vacancyDoc = await getDoc(doc(db, 'vacancies', vacancyId));
      if (vacancyDoc.exists()) {
        vacancy = {
          id: vacancyDoc.id,
          ...vacancyDoc.data()
        };
      }
    } catch (vacancyError) {
      console.error('Error fetching vacancy:', vacancyError);
    }

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Chat ID)
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID && TELEGRAM_CHAT_ID !== '7822840897') {
      try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
        const formatSalary = (salary: any) => {
          if (!salary) return '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
          if (typeof salary === 'string') return salary;
          if (typeof salary === 'object') {
            const { min, max, currency = '—Ä—É–±' } = salary;
            if (!min && !max) return '–ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏';
            if (!min) return `–¥–æ ${max} ${currency}`;
            if (!max) return `–æ—Ç ${min} ${currency}`;
            return `${min} - ${max} ${currency}`;
          }
          return String(salary);
        };

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        const telegramMessage = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é!*

üìã *–í–∞–∫–∞–Ω—Å–∏—è:* ${vacancy ? vacancy.title : `ID: ${vacancyId}`}
${vacancy ? `üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${vacancy.company || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}` : ''}
${vacancy ? `üìç *–õ–æ–∫–∞—Ü–∏—è:* ${vacancy.location || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}` : ''}
${vacancy ? `üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* ${formatSalary(vacancy.salary)}` : ''}

üë§ *–°–æ–∏—Å–∫–∞—Ç–µ–ª—å:*
‚Ä¢ –ò–º—è: ${applicantName}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${applicantPhone}
‚Ä¢ Email: ${applicantEmail || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

üÜî ID –∑–∞—è–≤–∫–∏: ${applicationId}
üÜî ID –≤–∞–∫–∞–Ω—Å–∏–∏: ${vacancyId}

‚è∞ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        const telegramResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: telegramMessage,
            parse_mode: 'Markdown',
          }),
        });

        if (!telegramResponse.ok) {
          const errorData = await telegramResponse.text();
          console.error('Telegram API error:', errorData);
        } else {
          console.log('‚úÖ Telegram notification sent successfully');
        }
      } catch (telegramError) {
        console.error('Error sending Telegram notification:', telegramError);
      }
    } else {
      console.warn('Telegram credentials not configured correctly');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json({
      success: true,
      applicationId: applicationId,
      message: 'Application submitted successfully'
    }, {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
      }
    });

  } catch (error) {
    console.error('Error processing application:', error);
    return NextResponse.json(
      {
        error: 'Failed to process application',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      {
        status: 500,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type',
        }
      }
    );
  }
}
