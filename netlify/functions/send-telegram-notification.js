exports.handler = async (event, context) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method not allowed' }),
    };
  }

  try {
    const { vacancy, applicant } = JSON.parse(event.body);

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.error('Missing Telegram credentials');
      return {
        statusCode: 500,
        body: JSON.stringify({ error: 'Missing Telegram configuration' }),
      };
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é!*

üìã *–í–∞–∫–∞–Ω—Å–∏—è:* ${vacancy.title}
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${vacancy.company}
üìç *–õ–æ–∫–∞—Ü–∏—è:* ${vacancy.location}
üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* ${typeof vacancy.salary === 'object' ? 
  `${vacancy.salary.min || '–æ—Ç'} - ${vacancy.salary.max || '–¥–æ'} ${vacancy.salary.currency || '—Ä—É–±'}` : 
  vacancy.salary}

üë§ *–°–æ–∏—Å–∫–∞—Ç–µ–ª—å:*
‚Ä¢ –ò–º—è: ${applicant.name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${applicant.phone}
‚Ä¢ Email: ${applicant.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${applicant.message || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

üÜî ID –≤–∞–∫–∞–Ω—Å–∏–∏: ${vacancy.id}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
      }),
    });

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.text();
      console.error('Telegram API error:', errorData);
      return {
        statusCode: 500,
        body: JSON.stringify({ error: 'Failed to send Telegram notification' }),
      };
    }

    return {
      statusCode: 200,
      body: JSON.stringify({ 
        success: true, 
        message: 'Notification sent successfully' 
      }),
    };

  } catch (error) {
    console.error('Error processing request:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: 'Internal server error' }),
    };
  }
};